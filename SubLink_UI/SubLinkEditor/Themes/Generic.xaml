<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:networkUI="clr-namespace:tech.sublink.SubLinkEditor.Controls.NetworkUI"
    xmlns:zoomAndPan="clr-namespace:tech.sublink.SubLinkEditor.Controls.ZoomAndPan">
    <!-- 
    Include this in binding statements for diagnostics:
    diagnostics:PresentationTraceSources.TraceLevel=High
    -->

    <LinearGradientBrush x:Key="selectionBorderColor" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="Yellow" Offset="0.5" />
        <GradientStop Color="#FFFF7E00" Offset="1" />
        <GradientStop Color="#FFFF7E00" Offset="0" />
        <GradientStop Color="Yellow" Offset="1" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="selectionBorderBackgroundColor"
        Color="Blue" Opacity="0.25" />

    <!-- Default style and control-template for 'NodeItem'. -->
    <Style 
        TargetType="{x:Type networkUI:NodeItem}"
        >

        <!-- Data-bind the parent NetworkView. -->
        <Setter
            Property="ParentNetworkView"
            Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type networkUI:NetworkView}}, Path=.}"
            />

        <!-- Set the position of the node within the canvas. -->
        <Setter
            Property="Canvas.Left"
            Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}"
            />
        <Setter
            Property="Canvas.Top"
            Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}"
            />

        <!-- Set the z-order of the node within the canvas. -->
        <Setter
            Property="Canvas.ZIndex"
            Value="{Binding ZIndex, RelativeSource={RelativeSource Self}, Mode=TwoWay}"
            />

        <!-- Set defaults for background and border. -->
        <Setter 
            Property="Background" 
            Value="Transparent" 
            />
        <Setter 
            Property="BorderBrush" 
            Value="Transparent" 
            />
        <Setter 
            Property="BorderThickness" 
            Value="4" 
            />

        <!-- The control-template for the node. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate 
                    TargetType="{x:Type networkUI:NodeItem}"
                    >
                    <Grid>

                        <!-- 
                        This border indicates that node is selected.
                        Normally it is transparent, but when 'IsSelected' is set
                        to 'true' the border brush becomes blue and its background
                        becomes light blue.
                        -->
                        <Border
                            x:Name="selectionBorder"
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="{TemplateBinding Margin}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="5"
                            >

                            <!-- 
                            User-defined node content is presented here. 
                            -->
                            <ContentPresenter />

                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True" >

                            <!-- When the node is selected, set the color of 'selectionBorder' to blue. -->
                            <Setter
                                TargetName="selectionBorder" Property="BorderBrush"
                                Value="{StaticResource selectionBorderColor}"
                                />
                            <Setter
                                TargetName="selectionBorder" Property="Background"
                                Value="{StaticResource selectionBorderBackgroundColor}"
                                />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style and control-template for 'ConnectorItem'. -->
    <Style TargetType="{x:Type networkUI:ConnectorItem}">

        <!-- Data-bind the parent NetworkView. -->
        <Setter
            Property="ParentNetworkView"
            Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type networkUI:NetworkView}}, Path=.}"
            />

        <!-- Data-bind the parent NodeItem. -->
        <Setter
            Property="ParentNodeItem"
            Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type networkUI:NodeItem}}, Path=.}"
            />

        <!-- The control-template for the connector. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate 
                    TargetType="{x:Type networkUI:ConnectorItem}"
                    >

                    <!-- Application-defined connector content is presented here. -->
                    <ContentPresenter />

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 
    Override the style of the ListBox to remove the ScrollViewer.
    All we want is ListBox logic but based on a Canvas.
    -->
    <Style x:Key="noScrollViewerListBoxStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <!-- 
                    The ListBoxItems are presented in a Canvas.
                    'IsItemsHost' is set to 'True' so that the ListBox
                    uses the Canvas as the container for its items.
                    -->
                    <Canvas 
                        IsItemsHost="True" 
                        />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style and visual template for 'NetworkView'. -->
    <Style 
        TargetType="{x:Type networkUI:NetworkView}"
        >

        <!-- The visual template. -->
        <Setter 
            Property="Template"
            >
            <Setter.Value>
                <ControlTemplate 
                    TargetType="{x:Type networkUI:NetworkView}"
                    >
                    <Border 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        >
                        <Grid>

                            <!-- Control that presents the connections between nodes. -->
                            <ItemsControl
                                x:Name="PART_ConnectionItemsControl"
                                ItemsSource="{TemplateBinding Connections}"
                                ItemTemplate="{TemplateBinding ConnectionItemTemplate}"
                                ItemTemplateSelector="{TemplateBinding ConnectionItemTemplateSelector}"
                                ItemContainerStyle="{TemplateBinding ConnectionItemContainerStyle}"
                                >
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <!-- Connections are presented in a Canvas. -->
                                        <Canvas />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>

                            <!-- Control that presents the nodes. -->
                            <networkUI:NodeItemsControl
                                x:Name="PART_NodeItemsControl"
                                ItemsSource="{TemplateBinding Nodes}"
                                SelectionMode="Extended"
                                Style="{StaticResource noScrollViewerListBoxStyle}"
                                ItemTemplate="{TemplateBinding NodeItemTemplate}"
                                ItemTemplateSelector="{TemplateBinding NodeItemTemplateSelector}"
                                ItemContainerStyle="{TemplateBinding NodeItemContainerStyle}"
                                />

                            <!--
                            This Canvas and Border are used as a very simple way to render a drag selection rectangle.
                            -->
                            <Canvas
                                x:Name="PART_DragSelectionCanvas"
                                Visibility="Collapsed"
                                >
                                <Border 
                                    x:Name="PART_DragSelectionBorder"
                                    BorderBrush="Blue"
                                    BorderThickness="1"
                                    Background="LightBlue"
                                    CornerRadius="1"
                                    Opacity="0.5"
                                    />
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    Default style and template for the ZoomAndPanControl.
    -->
    <Style 
    TargetType="{x:Type zoomAndPan:ZoomAndPanControl}"
    >

        <Setter 
        Property="Template"
        >
            <Setter.Value>

                <ControlTemplate 
                TargetType="{x:Type zoomAndPan:ZoomAndPanControl}"
                >

                    <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    >

                        <!-- 
                    The ContentPresenter is used to scale and offset the content of ZoomAndPanControl.
                
                    A transforms computed from 'ContentScale', 'ContentOffsetX' and 'ContentOffsetY' are assigned 
                    to the 'RenderTransform' property in OnApplyTemplate in ZoomAndPanControl.cs.
                    
                    The alignment is set to top-left.  This allows the content offset to be used to place
                    the content in the center of the viewport when the viewport is bigger than the content.
                    -->
                        <ContentPresenter 
						x:Name="PART_Content"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        />

                    </Border>

                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>

</ResourceDictionary>
